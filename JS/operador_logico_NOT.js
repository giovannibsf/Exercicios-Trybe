// Vamos iniciar com um exemplo do que o NOT √© capaz, voc√™ consegue prever o que esse c√≥digo vai imprimir?
// Copiar
//   console.log((2 + 2) === 4);
// Isso aqui deve nos retornar true , n√£o √©? Afinal, 2 + 2 resultar em 4 √© uma declara√ß√£o verdadeira. Agora, se adicionarmos o operador NOT antes dessa declara√ß√£o?
// Copiar
//   console.log(!(2 + 2) === 4);
// Se voc√™ executar esse c√≥digo, vai perceber que o valor impresso √© o oposto do anterior. ü§î
// Estamos diante de um operador muito poderoso. Ele pode inverter o valor booleano de um elemento. Isso mesmo!! Se tivermos uma vari√°vel ou valor considerado true , podemos gerar o resultado oposto simplesmente fazendo !vari√°vel . Ou seja, false .
// Ent√£o, sabendo que o resultado original da opera√ß√£o ali em cima √© true , quando a gente insere o operador NOT antes da opera√ß√£o, teremos o valor contr√°rio a nossa resposta final, que √© false .
// Vale lembrar que o conceito de truthy e falsy tamb√©m se aplica aqui, por isso n√£o estamos limitados apenas aos tipos primitivos booleanos. Podemos usar em:
// Strings...

// const squirtle = "melhor pokemon inicial";

// console.log(!squirtle); // false

// console.log(!42); // false

// console.log(!0); // true
// O n√∫mero 0 tem o valor "falsy" no javascript. Logo, seu oposto √© true.

// Valores nulos...

// console.log(!null); // true

// Valores indefinidos..


// console.log(!undefined); // true


// ...e em muitos outros elementos. As possibilidades s√£o enormes!!!

console.log(!null)