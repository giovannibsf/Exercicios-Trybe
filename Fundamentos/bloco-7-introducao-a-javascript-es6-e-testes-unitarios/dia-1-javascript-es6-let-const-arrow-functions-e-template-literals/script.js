// üöÄ Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.
// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function.
// Modifique as concatena√ß√µes para template literals.
// Copie o c√≥digo abaixo.


// function testingScope(escopo) {
//     if (escopo === true) {
//       var ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
//       ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
//       console.log(ifScope);
//     } else {
//       var elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
//       console.log(elseScope);
//     }
//     console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necess√°rio esta linha pode ser removida.
//   }

//   testingScope(true);

// const testingScope = (escopo) => {
//     if (escopo === true) {
//       var ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
//       ifScope = `${ifScope} √≥timo, fui utilizada no escopo !`;
//       console.log(ifScope);
//     } else {
//       const elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
//       console.log(elseScope);
//     }
//     // console.log(`${ifScope} o que estou fazendo aqui ? :O`); 
//   }

//   testingScope(true);





//   Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.
//   Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
//   B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todoarray.sort(). Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.
//   Copie o c√≥digo abaixo.


  // let oddsAndEvens = [13, 3, 4, 10, 7, 2];
  // const ordem = (parametro) => {
  //     for(let a = parametro.length - 1; a > 0 ; a -= 1) {
  //       for(i = 0; i < a; i+=1) {
  //         if(parametro[i] > parametro[i+1]) {
  //           [parametro[i] , parametro [i + 1]] = [parametro[i+1] , parametro[i]]
  //         }
  //       }
  //     }
             
  //     return(parametro)       
  //   }
  
  //  ordem(oddsAndEvens)
  
// const ordem = () => {
//   oddsAndEvens.sort(function(a, b) {return a - b})
//   return oddsAndEvens
// }

// ordem(oddsAndEvens)
//   console.log(`Os n√∫meros ${oddsAndEvens} se encontram ordenados de forma crescente`); 


// Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
// Na matem√°tica, o fatorial de um n√∫mero n√£o negativo N, com a nota√ß√£o N!, √© o produto de todos os inteiros menores ou iguais a N. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio de forma recursiva. Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator.



const fat = (n) => {
  return (n > 1 ? n * fat(n-1) : 1);

} 
  
  // if(n > 1) {
  //   return n * fat(n-1);
  // }



  // Crie uma fun√ß√£o que receba uma frase e retorne qual a maior palavra.
// const palavra = (frase) => {
//   const array = frase.split(" ")
//   let maior = " "
//   for (let i = 0; i < array.length; i +=1) {
//     if (array[i].length > maior.length) {
//       maior = array[i]
//     }
//       }
//       return maior
    
// }
    
    
  





